import { GSM_CODES } from './constants/GSM_CODES';
import { NETWORK_TYPES } from './constants/NETWORK_TYPES';
import { CONTACTS_ACTIONS } from './constants/CONTACTS_ACTIONS';
import { LOOKUP_TYPES } from './constants/LOOKUP_TYPES';
import { PROVIDER_NAMES } from './constants/PROVIDER_NAMES';
import { STATUS_REPORT_CODES } from './constants/STATUS_REPORT_CODES';
export declare type GsmCode = (typeof GSM_CODES)[number];
export declare type NetworkType = keyof typeof NETWORK_TYPES;
export declare type ContactsAction = keyof typeof CONTACTS_ACTIONS;
export declare type LookupType = keyof typeof LOOKUP_TYPES;
export declare type ProviderName = keyof typeof PROVIDER_NAMES;
export declare type StatusDeliveryCode = keyof typeof STATUS_REPORT_CODES;
export declare type CNAMApiCodes = 202 | 600;
export declare type BaseApiResponse = {
    success: boolean;
    code: 100 | 202 | 500 | 600;
};
export declare type Carrier = {
    country: string;
    name: string;
    network_code: string;
    network_type: NetworkType;
};
export declare type Contact = {
    email?: string;
    id?: number;
    ID?: string;
    Name?: string;
    number?: string;
    Number?: string;
    nick?: string;
};
export declare type Format = {
    national: string;
    carrier: string;
    country_code: string;
    country_iso: string;
    country_name: string;
    international: string;
    international_formatted: string;
    network_type: NetworkType;
    success: boolean;
};
export declare type HLR = {
    country_code: string;
    country_code_iso3?: string;
    country_name: string;
    country_prefix: string;
    current_carrier: Carrier;
    gsm_code: GsmCode;
    gsm_message: string;
    international_format_number: string;
    international_formatted: string;
    lookup_outcome: 1 | 2 | 0 | boolean;
    lookup_outcome_message: string;
    national_format_number: string;
    original_carrier: Carrier;
    ported: 'unknown' | 'ported' | 'not_ported' | 'assumed_not_ported' | 'assumed_ported';
    reachable: 'unknown' | 'reachable' | 'undeliverable' | 'absent' | 'bad_number' | 'blacklisted';
    roaming: 'not_roaming' | Roaming;
    status: boolean;
    status_message: 'error' | 'success';
    valid_number: 'unknown' | 'valid' | 'not_valid';
};
export declare type MNP = {
    country: string;
    international_formatted: string;
    isPorted: boolean;
    mccmnc: string;
    national_format: string;
    network: string;
    number: string;
};
export declare type Roaming = {
    roaming_country_code: string;
    roaming_network_code: string;
    roaming_network_name: string;
    status: 'not_roaming' | 'roaming' | 'unknown';
};
export declare type ContactsParams = {
    action: ContactsAction;
    email?: string;
    empfaenger?: string;
    id?: number;
    json?: boolean;
    nick?: string;
};
export declare type LookupParams = {
    type: LookupType;
    number: string;
    json?: boolean;
};
export declare type PricingParams = {
    country?: string;
    format?: 'json' | 'csv';
};
export declare type SmsMessage = {
    encoding: string;
    error: string | null;
    error_text: string | null;
    id: string;
    messages?: string[];
    parts: number;
    price: number;
    recipient: string;
    sender: string;
    success: boolean;
    text: string;
};
export declare type SmsType = 'direct' | 'economy';
export declare type SmsParams = {
    text: string;
    to: string;
    debug?: boolean;
    delay?: string;
    details?: boolean;
    flash?: boolean;
    from?: string;
    label?: string;
    json?: boolean;
    no_reload?: boolean;
    unicode?: boolean;
    udh?: string;
    utf8?: boolean;
    ttl?: string;
    performance_tracking?: boolean;
    return_msg_id?: boolean;
};
export declare type SmsJsonResponse = {
    debug: 'true' | 'false';
    balance: number;
    messages: SmsMessage[];
    sms_type: SmsType;
    success: string;
    total_price: number;
};
export declare type StatusParams = {
    msg_id: string;
};
export declare type ValidateForVoiceParams = {
    number: string;
    callback?: string;
};
export declare type VoiceParams = {
    text: string;
    to: string;
    xml?: boolean;
    from?: string;
};
export declare type CNAMApiJsonResponse = BaseApiResponse & {
    name: string;
    number: string;
};
export declare type CNAMApiResponse = CNAMApiCodes | CNAMApiJsonResponse;
export declare type ContactsResponse = Contact[] | string | number;
export declare type HLRApiResponse = string | HLR | number | {
    code: string;
};
export declare type FormatApiResponse = string | Format;
export declare type LookupResponse = string | number | FormatApiResponse | HLRApiResponse | CNAMApiResponse | MNPApiResponse;
export declare type MNPApiJsonResponse = BaseApiResponse & {
    mnp: MNP;
};
export declare type MNPApiResponse = ProviderName | MNPApiJsonResponse;
export declare type SmsResponse = string | SmsJsonResponse;
export declare type CountryNetwork = {
    comment: string;
    features: string[];
    mcc: string;
    mncs: string[];
    networkName: string;
    price: number;
};
export declare type CountryPricing = {
    countryCode: string;
    countryName: string;
    countryPrefix: string;
    networks: CountryNetwork[];
};
export declare type PricingResponse = {
    countCountries: number;
    countNetworks: number;
    countries: CountryPricing[];
};
export declare type StatusResponse = {
    report: StatusDeliveryCode;
    timestamp: string;
};
export declare type ValidateForVoiceResponse = {
    error: string;
    success: boolean;
    code?: string;
    formatted_output?: null;
    id?: null | number;
    sender?: string;
    voice?: boolean;
};
export declare type VoiceResponse = {
    code: number;
    cost: number;
    id: number;
};
